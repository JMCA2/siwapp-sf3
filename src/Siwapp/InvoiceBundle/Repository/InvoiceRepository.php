<?php

namespace Siwapp\InvoiceBundle\Repository;

use Doctrine\ORM\EntityRepository;

use Siwapp\CoreBundle\Entity\Serie;
use Siwapp\CoreBundle\Repository\AbstractInvoiceRepository;
use Siwapp\InvoiceBundle\Entity\Invoice;

/**
 * InvoiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceRepository extends AbstractInvoiceRepository
{
    /**
     * getNextNumber
     * Obtain the next numer available for the provided series
     * @param \Siwapp\CoreBundle\Entity\Serie @serie
     * @return integer
     */
    public function getNextNumber(Serie $series)
    {
        $found = $this->findBy([
            'status' => [Invoice::DRAFT, '<>'],
            'serie' => $series,
        ]);

        if (count($found) > 0) {
            $result = $this->getEntityManager()->createQueryBuilder()
                ->select('MAX(i.number) AS max_number')
                ->from(Invoice::class, 'i')
                ->where('i.status <> :status')
                ->andWhere('i.serie = :series')
                ->setParameter('status', Invoice::DRAFT)
                ->setParameter('series', $series)
                ->getQuery()
                ->getSingleResult();

            return $result['max_number'] + 1;
        } else {
            return $series->getFirstNumber();
        }
    }

    public function getTotalsAndDuePerCustomer()
    {
        $result = $this->getEntityManager()->createQueryBuilder()
            ->select('SUM(i.gross_amount) as gross')
            ->addSelect('SUM(i.gross_amount-i.paid_amount) as due')
            ->addSelect('IDENTITY(i.customer) as customer_id')
            ->from(Invoice::class, 'i')
            ->where('i.status <> :status')
            ->setParameter('status', Invoice::DRAFT)
            ->groupBy('i.customer')
            ->getQuery()
            ->getResult();
        $total = [];
        foreach ($result as $row) {
            $total[$row['customer_id']] = $row;
        }

        return $total;
    }

    public function getDuePerCustomer()
    {

    }
}
